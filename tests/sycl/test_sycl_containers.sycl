/** VecMem project, part of the ACTS project (R&D line)
 *
 * (c) 2021 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// SYCL include(s).
#include <CL/sycl.hpp>

// Local include(s).
#include "vecmem/containers/array.hpp"
#include "vecmem/containers/const_device_array.hpp"
#include "vecmem/containers/const_device_vector.hpp"
#include "vecmem/containers/device_vector.hpp"
#include "vecmem/containers/vector.hpp"
#include "vecmem/memory/atomic.hpp"
#include "vecmem/memory/sycl/shared_memory_resource.hpp"
#include "../../sycl/src/utils/sycl/device_selector.hpp"

// GoogleTest include(s).
#include <gtest/gtest.h>

/// Test fixture for the on-device vecmem container tests
class sycl_containers_test : public testing::Test {};

/// Test a linear transformation using the shared memory resource
TEST_F( sycl_containers_test, shared_memory ) {

   // Create the SYCL queue that we'll be using in the test.
   cl::sycl::queue queue{ vecmem::sycl::device_selector() };

   // The shared memory resource.
   vecmem::sycl::shared_memory_resource resource( &queue );

   // Create an input and an output vector in host (managed) memory.
   vecmem::vector< int > inputvec( { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 },
                                   &resource );
   vecmem::vector< int > outputvec( inputvec.size(), &resource );
   EXPECT_EQ( inputvec.size(), outputvec.size() );

   // Create the array that is used in the linear transformation.
   vecmem::array< int, 2 > constants( resource );
   constants[ 0 ] = 2;
   constants[ 1 ] = 3;

   // Perform a linear transformation using the vecmem vector helper types.
   queue.submit( [ &constants, &inputvec, &outputvec ]( cl::sycl::handler& h ) {

      // Run the kernel.
      h.parallel_for< class LinearTransform >(
         cl::sycl::range< 1 >( inputvec.size() ),
         [ constants = vecmem::get_data( constants ),
           input = vecmem::get_data( inputvec ),
           output = vecmem::get_data( outputvec ) ]( cl::sycl::id< 1 > id ) {

            // Skip invalid indices.
            if( id >= input.m_size ) {
               return;
            }

            // Create the helper containers.
            const vecmem::const_device_array< int, 2 >
               constantarray( constants );
            const vecmem::const_device_vector< int > inputvec( input );
            vecmem::device_vector< int > outputvec( output );

            // Perform the linear transformation.
            outputvec.at( id ) = inputvec.at( id ) * constantarray.at( 0 ) +
                                 constantarray.at( 1 );
            return;
         } );
   } );
   queue.wait();

   // Check the output.
   EXPECT_EQ( inputvec.size(), outputvec.size() );
   for( std::size_t i = 0; i < outputvec.size(); ++i ) {
      EXPECT_EQ( outputvec.at( i ),
                 inputvec.at( i ) * constants[ 0 ] + constants[ 1 ] );
   }
}

/// Test atomic access in a simple kernel
TEST_F( sycl_containers_test, atomic_memory ) {

   // Create the SYCL queue that we'll be using in the test.
   cl::sycl::queue queue{ vecmem::sycl::device_selector() };

   // The shared memory resource.
   vecmem::sycl::shared_memory_resource resource( &queue );

   // Allocate memory on it that would be modified atomically.
   vecmem::vector< int > buffer( 100, 0, &resource );

   // Number of iterations performed on a single buffer element.
   static constexpr int ITERATIONS = 100;

   // Do very basic atomic modifications on the buffer.
   queue.submit( [ &buffer ]( cl::sycl::handler& h ) {
      h.parallel_for< class AtomicTests >(
         cl::sycl::range< 1 >( buffer.size() * ITERATIONS ),
         [ buffer = vecmem::get_data( buffer ) ]( cl::sycl::item< 1 > id ) {

            // Check if anything needs to be done.
            if( id >= buffer.m_size * ITERATIONS ) {
               return;
            }

            // Index/pointer to modify.
            const std::size_t index = id % buffer.m_size;
            int* ptr = buffer.m_ptr + index;

            // Do some simple stuff with it.
            vecmem::atomic< int > a( ptr );
            a.fetch_add( 4 );
            a.fetch_sub( 2 );
            a.fetch_and( 0xffffffff );
            a.fetch_or( 0x00000000 );
         } );
   } );
   queue.wait();

   // Check the output.
   for( int value : buffer ) {
      EXPECT_EQ( value, ITERATIONS * 2 );
   }
}
