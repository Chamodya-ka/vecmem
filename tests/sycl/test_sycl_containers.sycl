/** VecMem project, part of the ACTS project (R&D line)
 *
 * (c) 2021 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// SYCL include(s).
#include <CL/sycl.hpp>

// Local include(s).
#include "vecmem/containers/array.hpp"
#include "vecmem/containers/const_device_array.hpp"
#include "vecmem/containers/const_device_vector.hpp"
#include "vecmem/containers/device_vector.hpp"
#include "vecmem/containers/vector.hpp"
#include "vecmem/memory/sycl/device_memory_resource.hpp"
#include "vecmem/memory/sycl/host_memory_resource.hpp"
#include "vecmem/memory/sycl/shared_memory_resource.hpp"
#include "vecmem/utils/sycl/copy.hpp"
#include "../../sycl/src/utils/sycl/device_selector.hpp"

// GoogleTest include(s).
#include <gtest/gtest.h>

/// Test fixture for the on-device vecmem container tests
class sycl_containers_test : public testing::Test {};

/// Test a linear transformation using the shared memory resource
TEST_F( sycl_containers_test, shared_memory ) {

   // Create the SYCL queue that we'll be using in the test.
   cl::sycl::queue queue{ vecmem::sycl::device_selector() };

   // The shared memory resource.
   vecmem::sycl::shared_memory_resource resource( &queue );

   // Create an input and an output vector in host (managed) memory.
   vecmem::vector< int > inputvec( { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 },
                                   &resource );
   vecmem::vector< int > outputvec( inputvec.size(), &resource );
   EXPECT_EQ( inputvec.size(), outputvec.size() );

   // Create the array that is used in the linear transformation.
   vecmem::array< int, 2 > constants( resource );
   constants[ 0 ] = 2;
   constants[ 1 ] = 3;

   // Perform a linear transformation using the vecmem vector helper types.
   queue.submit( [ &constants, &inputvec, &outputvec ]( cl::sycl::handler& h ) {

      // Run the kernel.
      h.parallel_for< class LinearTransform1 >(
         cl::sycl::range< 1 >( inputvec.size() ),
         [ constants = vecmem::get_data( constants ),
           input = vecmem::get_data( inputvec ),
           output = vecmem::get_data( outputvec ) ]( cl::sycl::id< 1 > id ) {

            // Skip invalid indices.
            if( id >= input.size() ) {
               return;
            }

            // Create the helper containers.
            const vecmem::const_device_array< int, 2 >
               constantarray( constants );
            const vecmem::const_device_vector< int > inputvec( input );
            vecmem::device_vector< int > outputvec( output );

            // Perform the linear transformation.
            outputvec.at( id ) = inputvec.at( id ) * constantarray.at( 0 ) +
                                 constantarray.at( 1 );
            return;
         } );
   } );
   queue.wait();

   // Check the output.
   EXPECT_EQ( inputvec.size(), outputvec.size() );
   for( std::size_t i = 0; i < outputvec.size(); ++i ) {
      EXPECT_EQ( outputvec.at( i ),
                 inputvec.at( i ) * constants[ 0 ] + constants[ 1 ] );
   }
}

/// Test a linear transformation using the host/device memory resources
TEST_F( sycl_containers_test, device_memory ) {

   // Create the SYCL queue that we'll be using in the test.
   cl::sycl::queue queue{ vecmem::sycl::device_selector() };

   // The memory resources.
   vecmem::sycl::host_memory_resource host_resource( &queue );
   vecmem::sycl::device_memory_resource device_resource( &queue );

   // Helper object for performing memory copies.
   vecmem::sycl::copy copy( &queue );

   // Create an input and an output vector in host memory.
   vecmem::vector< int > inputvec( { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 },
                                   &host_resource );
   vecmem::vector< int > outputvec( inputvec.size(), &host_resource );
   EXPECT_EQ( inputvec.size(), outputvec.size() );

   // Allocate a device memory block for the output container.
   auto outputvechost = vecmem::get_data( outputvec );
   vecmem::data::vector_buffer< int >
      outputvecdevice( outputvec.size(), device_resource );

   // Create the array that is used in the linear transformation.
   vecmem::array< int, 2 > constants( host_resource );
   constants[ 0 ] = 2;
   constants[ 1 ] = 3;

   // Explicitly copy the input objects to the device. We need to do it outside
   // of the @c sycl::queue::submit call, as the local variables of the lambda
   // given to that function are deleted before the kernel would run.
   auto const_data = copy.to( vecmem::get_data( constants ),
                              device_resource );
   auto input_data = copy.to( vecmem::get_data( inputvec ),
                              device_resource );

   // Perform a linear transformation using the vecmem vector helper types.
   queue.submit( [ &const_data, &input_data,
                   &outputvecdevice ]( cl::sycl::handler& h ) {

      // Run the kernel.
      h.parallel_for< class LinearTransform2 >(
         cl::sycl::range< 1 >( input_data.size() ),
         [ constants = vecmem::get_data( const_data ),
           input = vecmem::get_data( input_data ),
           output = vecmem::get_data( outputvecdevice ) ]( cl::sycl::id< 1 > id ) {

            // Skip invalid indices.
            if( id >= input.size() ) {
               return;
            }

            // Create the helper containers.
            const vecmem::const_device_array< int, 2 >
               constantarray( constants );
            const vecmem::const_device_vector< int > inputvec( input );
            vecmem::device_vector< int > outputvec( output );

            // Perform the linear transformation.
            outputvec.at( id ) = inputvec.at( id ) * constantarray.at( 0 ) +
                                 constantarray.at( 1 );
            return;
         } );
   } );
   queue.wait();
   copy( outputvecdevice, outputvechost );
   queue.wait();

   // Check the output.
   EXPECT_EQ( inputvec.size(), outputvec.size() );
   for( std::size_t i = 0; i < outputvec.size(); ++i ) {
      EXPECT_EQ( outputvec.at( i ),
                 inputvec.at( i ) * constants[ 0 ] + constants[ 1 ] );
   }
}
