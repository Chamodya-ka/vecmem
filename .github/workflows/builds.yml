# VecMem project, part of the ACTS project (R&D line)
#
# (c) 2021 CERN for the benefit of the ACTS project
#
# Mozilla Public License Version 2.0

# Name for this "action".
name: Build Tests

# Perform the builds on every push and pull request.
on: [ push, pull_request ]

# All the different build/test jobs.
jobs:

  # Native build job on an Ubuntu system.
  ubuntu-native:

    # The system to run on.
    runs-on: ubuntu-latest

    # The different build modes to test.
    strategy:
      matrix:
        BUILD_TYPE: [ "Release", "Debug" ]

    # The build/test steps to execute.
    steps:
    # Use a standard checkout of the code.
    - uses: actions/checkout@v2
    # Run the CMake configuration.
    - name: Configure
      run: cmake -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE }} -S $GITHUB_WORKSPACE -B build
    # Perform the build.
    - name: Build
      run: cmake --build build
    # Run the unit test(s).
    - name: Test
      run: |
        cd build
        ctest --output-on-failure

  # Builds inside of a CUDA or ROCm/HIP Docker image.
  cuda_hip:

    # The different build modes to test.
    strategy:
      matrix:
        CONTAINER: [ "ghcr.io/acts-project/ubuntu1804_cuda:v11",
                     "ghcr.io/acts-project/ubuntu1804_rocm:v11" ]
        BUILD_TYPE: [ "Release", "Debug" ]

    # The system to run on.
    runs-on: ubuntu-latest
    container: ${{ matrix.CONTAINER }}

    # The build/test steps to execute.
    steps:
    # Use a standard checkout of the code.
    - uses: actions/checkout@v2
    # Run the CMake configuration.
    - name: Configure
      run: cmake -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE }}
                 -S $GITHUB_WORKSPACE -B build
    # Perform the build.
    - name: Build
      run: cmake --build build

  # Build inside of a SYCL capable Docker image.
  sycl:

    # The system to run on.
    runs-on: ubuntu-latest
    container: ghcr.io/acts-project/ubuntu2004_oneapi:v11

    # The different build modes to test.
    strategy:
      matrix:
        BUILD_TYPE: [ "Release", "Debug" ]

    # Use BASH as the shell from the image.
    defaults:
      run:
        shell: bash

    # The build/test steps to execute.
    steps:
    # Use a standard checkout of the code.
    - uses: actions/checkout@v2
    # Run the CMake configuration.
    - name: Configure
      run: |
        source /opt/intel/oneapi/setvars.sh
        export CXX=`which clang++`
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE }} -S $GITHUB_WORKSPACE -B build
    # Perform the build.
    - name: Build
      run: |
        source /opt/intel/oneapi/setvars.sh
        cmake --build build
    # Run the unit test(s).
    - name: Test
      run: |
        cd build
        source /opt/intel/oneapi/setvars.sh
        ctest --output-on-failure
